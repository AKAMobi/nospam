<?php
require_once ('DB.ns');

class XMLConfig
{
	var $file;
	var $dom;
	var $xpath;

	function XMLConfig($file)
	{
		$this->file = $file;
		if(!file_exists($file)){
			$dom = domxml_open_mem("<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?><rule-add-modify><rule rule_id=\"\" /></rule-add-modify>");
			$dom->dump_file($file,false,true);
		}
		$this->dom = domxml_open_file($file);
		$this->xpath = xpath_new_context($this->dom);
	}

	function getNodes($path)
	{
		$xpresult = xpath_eval($this->xpath,$path); 
		return $xpresult->nodeset;
	}

	function getRoot()
	{
		return $this->dom->document_element();
	}

	function createNode($node)
	{
		return $this->dom->create_element($node);
	}

	function cloneNode($node)
	{
		$ret=$node->clone_node();
		if($node->type == XML_ELEMENT_NODE){
			if($attrArray = $node->attributes()){
				foreach($attrArray as $attr){
					$ret->set_attribute($attr->name,$attr->value);
				}
			}
			if ($childArray = $node->children()){
				foreach($childArray as $child) {
					$newnode=$this->cloneNode($child);
					$ret->append_child($newnode);
				}
			}
		}
		return $ret;
	}

	function save()
	{
		if(!adminPerm(PERM_ADMIN_WRITE)){
			echo _("You have no permission to modify system configuration");
			return;
		}

		$root = $this->dom->document_element();
		$doc = domxml_new_doc("1.0");
		$newroot = $this->cloneNode($root);
		$doc -> append_child($newroot);
		$str = $doc->dump_mem(true,"ISO-8859-1");
		savetofile($str,$this->file);
		LogAction(_("Rules Database"),_("Modify"),"");
	}
}

class RuleDB extends XMLConfig
{
	var $sort;
	var $order;

	function RuleDB($file = POLICE_DB)
	{
		XMLConfig::XMLConfig($file);
	}

	function _rulecmp($a,$b)
	{
		switch($this->sort){
			case "rule_id":
				case "rule_comment":
				case "category_id":
				case "create_time":
				$tmpa = $a->get_attribute($this->sort);
			$tmpb = $b->get_attribute($this->sort);
			break;
			case "rule_keyword":
				case "size":
				case "attachment":
				$tmpa = count($a->get_elements_by_tagname($this->sort));
			$tmpb = count($b->get_elements_by_tagname($this->sort));
			break;
			case "action":
				$actionsA = $a->get_elements_by_tagname("rule_action");
			$actionA = $actionsA[0];
			$actionsB =	$b->get_elements_by_tagname("rule_action");
			$actionB = $actionsB[0];

			$tmpa = $actionA->get_attribute("action");
			$tmpb = $actionB->get_attribute("action");
			break;
		}

		if($tmpa == $tmpb)
			return 0;

		if($this->order == "asc")
			return ($tmpa < $tmpb) ? -1 : 1;
		elseif($this->order == "desc")
			return ($tmpa > $tmpb) ? -1 : 1;
	}

	function get_rules($start = 0, $end = -1, $s = "rule_id" , $o = "unsorted")
	{
		$this->sort = $s;
		$this->order = $o;

		$path = "/rule-add-modify/rule";
		$tmps = XMLConfig::getNodes($path);
		$nodes = array();
		$i = 0;
		foreach($tmps as $node){
			if($node->get_attribute("rule_id")){
				$nodes[$i] = $node;
				$i++;
			}
		}

		if($start < 0)	$start = 0;
		if($end < 0 || $end >= $i)	$end = $i-1;

		$ret = array();

		if($order != "unsorted")
			usort($nodes,array($this,"_rulecmp"));

		while($start <= $end){
			$ret[$start] = $nodes[$start];
			$start++;
		}

		return $ret;
	}

	function get_rules_count()
	{
		$rules = $this->get_rules();
		$i = 0;
		foreach($rules as $rule){
			if($rule->get_attribute("rule_id")){
				$i++;
			}
		}
		return $i;
	}

	function get_rule_by_id($id)
	{
		$rules = XMLConfig::getNodes("/rule-add-modify/rule[@rule_id='".$id."']");
		return $rules[0];
	}

	function get_action_rule($id)
	{
		$rule = $this->get_rule_by_id($id);
		$tmp = $rule->get_elements_by_tagname("rule_action");
		return $tmp[0];
	}

	function create_rule($id)
	{
		$rule = XMLConfig::createNode("rule");
		$rule->set_attribute("rule_id",$id);
		return $rule;
	}
}

class ConfFile
{
	var $params;
	var $file;
	var $bSection;

	function ConfFile($file, $bSec)
	{
		$this->file = $file;
		if(!file_exists($file)){
			$fp = fopen($file,"w");
			fclose($fp);
		}
		$this->bSection = $bSec;
		$this->params = $this->parse_ini($file,$bSec);
		/*		$fp = fopen($file,"r");
				$str = fread($fp,filesize($file));
				fclose($fp);
				$lines = explode("\n",trim($str));
				foreach($lines as $line){
				$line = trim($line);
				if($line=="" || $line[0]=="#")
				continue;
				list($key,$value) = explode("=",$line);
				$this->params[trim($key)] = trim($value);
				}*/
	}

	function parse_ini($filename, $process_sections = false) {
		$ini_array = array();
		$sec_name = "";
		$lines = file($filename);
		foreach($lines as $line) {
			$line = trim($line);

			if($line == "" || $line[0] == "#") 
				continue;

			if($line[0] == "[" && $line[strlen($line) - 1] == "]")
				$sec_name = trim(substr($line, 1, strlen($line) - 2));
			else {
				$pos = strpos($line, "=");
				$property = trim(substr($line, 0, $pos));
				$value = substr($line, $pos + 1);
				if($process_sections)
					$ini_array[$sec_name][$property] = trim($value);
				else
					$ini_array[$property] = trim($value);
			}
		}
		return $ini_array;
	}

	function getParam($key,$section = "")
	{
		if($this->bSection){
			if(!array_key_exists($section,$this->params))
				return "";

			if(!array_key_exists($key,$this->params[$section]))
				return "";

			return $this->params[$section][$key];
		}

		if(!array_key_exists($key,$this->params))
			return "";

		return $this->params[$key];
	}

	function setParam($key,$value,$section = "")
	{
		if($this->bSection){
			if (!array_key_exists($section,$this->params))
				$this->params[$section] = array();
			$oldValue = $this->params[$section][$key];
			$this->params[$section][$key] = $value;
			LogAction(_("Configuration File"),_("Modify"),"(".$section.")".$key,$oldValue,$value);
		}else{
			$oldValue = $this->params[$key];
			$this->params[$key] = $value;
			LogAction(_("Configuration File"),_("Modify"),$key,$oldValue,$value);
		}
	}

	function delParam($key, $section = "")
	{
		if($this->bSection){
			unset($this->params[$section][$key]);
			LogAction(_("Configuration File"),_("Delete"),"(".$section.")".$key);
		}else{
			unset($this->params[$key]);
			LogAction(_("Configuration File"),_("Delete"),$key);
		}
	}

	function hasParam($key, $section = "")
	{
		if($this->bSection){
			if(array_key_exists($section,$this->params))
				return array_key_exists($key,$this->params[$section]);
			return false;
		}else{
			return array_key_exists($key,$this->params);
		}
	}

	function save()
	{
		if(!adminPerm(PERM_ADMIN_WRITE)){
			echo _("You have no permission to modify system configuration");
			return;
		}

		$params = $this->params;
		$str = "";
		if($this->bSection){
			if(count($params[""])>0){
				foreach($params[""] as $key=>$value)
					$str .= "$key=$value\n";
			}
			unset($params[""]);
			if($str!="")
				$str .= "\n";
			foreach($params as $section=>$values){
				$str .= "[$section]\n";
				if(count($values)>0){
					foreach($values as $key=>$value)
						$str .= "$key=$value\n";
				}
				$str.="\n";
			}
		}else{
			foreach($params as $key=>$value){
				$str .= "$key=$value\n";
			}
		}
		savetofile(trim($str),$this->file);
	}
}

class NoSPAMConf extends ConfFile
{
	function NoSPAMConf()
	{
		ConfFile::ConfFile(CONF,true);
	}

	function getList($sList, $sSection)
	{
		$ret = array();
		$str = ConfFile::getParam($sList, $sSection);
		if(trim($str) == "")
			return $ret;
		$temp = explode(",",$str);
		if(count($temp) > 0){
			$i = 0;
			foreach($temp as $value){
				list($key,$note) = explode("#",$value);
				$ret[$key]=$note;
			}
		}
		return $ret;
	}

	function setList($sList, $aParam, $sSection)
	{
		$temp = array();
		$i = 0;
		if($sList=="WhiteIPList" || $sList=="BlackIPList" || $sList=="WhiteIPConcurList" || $sList=="WhiteIPRateList"){
			if(count($aParam) > 0){
				foreach($aParam as $key=>$note){
					if(!checkipaddr($key,true))
						die("IP ".$key._("Format Error"));
					$temp[$i] = trim($key)."#".trim(str_replace(",","£¬",$note));
					$i++;
				}
			}
		}else{
			if(count($aParam) > 0){
				foreach($aParam as $key=>$note){
					$temp[$i] = trim($key)."#".trim(str_replace(",","£¬",$note));
					$i++;
				}
			}
		}
		$sParam = trim(implode(",",$temp));
		ConfFile::setParam($sList,$sParam,$sSection);
	}
}

class NoSPAMIntConf extends ConfFile
{
	function NoSPAMIntConf()
	{
		ConfFile::ConfFile(INTCONF,false);
	}
}

class License
{
	var $params;

	function License()
	{
		$fp = fopen(LICENSE,"r");
		$str = fread($fp,filesize(LICENSE));
		fclose($fp);
		$lines = explode("\n",trim($str));
		foreach($lines as $line){
			$line = trim($line);
			if($line[0]=="#" )
				continue;
			list($key,$value) = explode("=",$line);
			$this->params[trim($key)] = trim($value);
		}
	}

	function Language()
	{
		if (!array_key_exists('Language',$this->params))
			return "zh_CN";

		return $this->params["Language"];
	}


	function Switchable()
	{
		if($this->params["ServerGatewaySwitchable"] == "Y")
			return true;

		return false;
	}

	function ServerGateway()
	{
		return $this->params["ServerGateway"];
	}

	function ExpireDate()
	{
		$parts = explode(" ",trim($this->params["ExpireDate"]));
		return $parts[0];
	}

	function getProductName()
	{
		return $this->params["ProductName"];
	}

	function LicenseHTML()
	{
		return $this->params["LicenseHTML"];
	}

	function isForSell()
	{
		return $this->params["ForSell"] == "Yes";
	}

	function get_LicenseID()
	{
		return $this->params["ProductLicense"];
	}

	function get_FactoryName()
	{
		return $this->params["FactoryName"];
	}

	function DynamicEngine()
	{
		return intval($this->params["DynamicEngine"]);
	}

	function ContentEngine()
	{
		return intval($this->params["ContentEngine"]);
	}

	function QuarantineEngine()
	{
		return intval($this->params["QuarantineEngine"]);
	}

	function SpamEngine()
	{
		return intval($this->params["SpamEngine"]);
	}
	function ArchiveEngine()
	{
		return intval($this->params["ArchiveEngine"]);
	}

	function InteractiveEngine()
	{
		return intval($this->params["InteractiveEngine"]);
	}

	function MailGateway()
	{
		return intval($this->params["MailGateway"]);
	}
	function MailServer()
	{
		return intval($this->params["MailServer"]);
	}

	function MailRelay()
	{
		return intval($this->params["MailRelay"]);
	}

	function AntiVirusEngine()
	{
		return intval($this->params["AntiVirusEngine"]);
	}

	function getVersion()
	{
		return $this->params["Version"];
	}

	function getMaxUser()
	{
		if (!array_key_exists('MailServerMaxUser',$this->params))
			return 1;
		return intval($this->params['MailServerMaxUser']);
	}

	function getMaxDomain()
	{
		if (!array_key_exists('MailServerMaxDomain',$this->params))
			return 1;
		return intval($this->params['MailServerMaxDomain']);
	}

	function getMaxProtectDomainNumber()	{	    
		if (!array_key_exists('MaxProtectDomainNumber',$this->params))
			return -1;	    return intval($this->params['MaxProtectDomainNumber']);    	}	    

	function getRestrictDomainList() {
		return $this->params['RestrictDomainList'];
	}

	function getMaxQuota()
	{
		if (!array_key_exists('MailServerMaxQuota',$this->params))
			return 1;
		return intval($this->params['MailServerMaxQuota']);
	}

	function getGAInterface()
	{
		return intval($this->params['GAInterface']);
	}
}

class LoginBlackList
{
	var $aBlockList = array();
	var $aLoginfailListID = array();
	var $aLoginfailListIP = array();

	function LoginBlackList()
	{
		if (!file_exists(IPDENYLIST)){
			fclose(fopen(IPDENYLIST,"w"));
		}
		$fp = fopen(IPDENYLIST,"r");
		while ($line = fgets($fp,1024)){
			list($ip, $time) = explode(" ",$line);
			$this->aBlockList[$ip] = intval($time);
		}
		fclose($fp);

		if (!file_exists(LOGINFAILLIST)){
			fclose(fopen(LOGINFAILLIST,"w"));
		}
		$fp = fopen(LOGINFAILLIST,"r");
		while ($line = fgets($fp,1024)){
			list($id, $ip, $time) = explode(" ",$line);
			if (!array_key_exists($ip.":".$id, $this->aLoginfailListID))
				$this->aLoginfailListID[$ip.":".$id] = array();
			array_push($this->aLoginfailListID[$ip.":".$id], intval($time));

			if (!array_key_exists($ip, $this->aLoginfailListIP))
				$this->aLoginfailListIP[$ip] = array();
			array_push($this->aLoginfailListIP[$ip], intval($time));
		}
		fclose($fp);
	}

	function isDenied($sIP)
	{
		if (!array_key_exists($sIP, $this->aBlockList))
			return false;

		if (time() > $this->aBlockList[$sIP]){
			unset($this->aBlockList[$sIP]);
			$this->saveBlockList();
			return false;
		}

		LogAction(_("Admin Login"),_("Users in BlackList is trying to Login"),$sIP);
		return true;
	}

	function getDeniedTime($sIP)
	{
		if (!$this->isDenied($sIP))
			return 0;
		return $this->aBlockList[$sIP];
	}

	function addBlockList($sIP)
	{
		global $iDenyTimeAfterMaxLogin;

		$this->aBlockList[$sIP] = time() + 60 * $iDenyTimeAfterMaxLogin;
		$this->saveBlockList();
		LogAction(_("Admin Login"),_("Add to IP Blocklist"),$sIP);
	}

	function saveBlockList()
	{
		$str = "";
		if (count($this->aBlockList) > 0){
			foreach ($this->aBlockList as $key=>$value){
				$str .= $key." ".$value."\n";
			}
		}
		savetofile($str,IPDENYLIST);
	}

	function addLoginfailList($sIP, $sID)
	{
		global $iDenyTimeAfterMaxLogin,$iUserMaxLoginRetry,$iIPMaxLoginRetry;

		$bBlock = false;
		$time = time();
		if (array_key_exists($sIP.":".$sID,$this->aLoginfailListID)){
			if ($time <= (min($this->aLoginfailListID[$sIP.":".$sID]) + 60 * 5)){
				if (count($this->aLoginfailListID[$sIP.":".$sID]) > ($iUserMaxLoginRetry-1)){
					$bBlock = true;
				}
			}
		}

		if (!$Block && array_key_exists($sIP,$this->aLoginfailListIP)){
			if ($time <= (min($this->aLoginfailListIP[$sIP]) + 60 * 5)){
				if (count($this->aLoginfailListIP[$sIP]) > ($iIPMaxLoginRetry-1)){
					$bBlock = true;
				}
			}
		}

		LogAction(_("Admin Login"),_("Login Failure"),$sID);

		if ($bBlock){
			$this->addBlockList($sIP);
			unset(
					$this->aLoginfailListID[$sIP.":".$sID],
					$this->aLoginfailListIP[$sIP]
			     );
			$this->saveLoginfailList();
		}else{
			$filter = create_function('$value','return $value > '.($time - 60 * 5).';');
			$tmpArray = array();
			if (array_key_exists($sIP.":".$sID,$this->aLoginfailListID)){
				$tmpArray = 
					array_filter($this->aLoginfailListID[$sIP.":".$sID], $filter);
			}
			array_push($tmpArray,$time);
			$this->aLoginfailListID[$sIP.":".$sID] = $tmpArray;
			$tmpArray = array();
			if (array_key_exists($sIP,$this->aLoginfailListIP)){
				$tmpArray = 
					array_filter($this->aLoginfailListIP[$sIP], $filter);
			}
			array_push($tmpArray,$time);
			$this->aLoginfailListIP[$sIP] = $tmpArray;
			$this->saveLoginfailList();
		}
	}

	function saveLoginfailList()
	{
		$str = "";
		if (count($this->aLoginfailListID) > 0){
			foreach ($this->aLoginfailListID as $key=>$value){
				list($ip, $id) = explode(":", $key);
				if (array_key_exists($ip, $this->aLoginfailListIP)){
					foreach ($value as $time){
						if (in_array($time, $this->aLoginfailListIP[$ip]))
							$str .= $id." ".$ip." ".$time."\n";
					}
				}
			}
		}
		savetofile($str,LOGINFAILLIST);
	}
}

/* 
 *  start
 *  add by Xiaoying Hu Jul 30 , 2004
 */
class WhiteListItem {
	var $id;
	var $email;
	var $type;

	function WhiteListItem ($id, $email, $type) {
		$this->id = $id;
		$this->email = $email;
		$this->type = $type;
	}

}

class EmailUser {
	var $email;
	var $user;
	var $domain;
	var $path;
	var $init;
	var $fullMailList;
	var $mailCnt;
	var $mailList;
	var $start;
	var $end;
	var $totalSize;
	var $whiteList;
	var $listTotle;
	var $listTable;
	var $listType;
	var $db;

	/**
	  int login (string $emailAddr, string $password)
	  return 0: success
1: success
-1:emailAddr or Password error!
-2:system error
	 */
	function login ($emailAddr, $password) {
		if (!checkmailaddr($emailAddr) || !$password)
			return -1;
		$this->init = false;
		$parms = ' QuarantineGetInfo ' . $emailAddr . '  ' . $password;
		$ret = wi ($parms, $result);

		switch ($ret) {
			case 1:
				$this->init = true;
			case 0:
				$this->path =  $result[0];
				$this->email = trim ($emailAddr);
				list ($this->user, $this->domain) = explode ('@', $this->email);
				break;
			default:
				return $ret;
		}
		return 0;
	}

	function initWhiteList ($type) {
		if (!file_exists (QUARANTINESQLFILEPATH)) {
			echo _("SQLite Database File is not exist");
			echo QUARANTINESQLFILEPATH;
			exit ();
		}
		$dsn = array ('dbFile'=> QUARANTINESQLFILEPATH , 'dbMode'=>0666, 'dbType'=>'sqlite' );
		$this->listTable = QUARANTINEWHITELISTTABLE;
		$tmp = new DB;
		$this->db = $tmp->init ($dsn);
		unset ($tmp);
		switch ($type) {
			case QUARANTINE_WHILE_LIST:
				$this->listType = QUARANTINE_WHILE_LIST;
				$sql = sprintf ("SELECT COUNT(*) as TOTAL FROM %s WHERE User = '%s' AND Domain = '%s' AND Type = %d ;", $this->listTable, db_escape_string ($this->user), db_escape_string ($this->domain), $this->listType);
				break;
			case QUARANTINE_BLACK_LIST:
				$this->listType = QUARANTINE_BLACK_LIST;
				$sql = sprintf ("SELECT COUNT(*) as TOTAL FROM %s WHERE User = '%s' AND Domain = '%s' AND Type = %d ;", $this->listTable, db_escape_string ($this->user), db_escape_string ($this->domain), $this->listType);
				break;
			default:
				$this->listType = QUARANTINE_ALL_LIST;
				$sql = sprintf ("SELECT COUNT(*) as TOTAL FROM %s WHERE User = '%s' AND Domain = '%s' ;", $this->listTable, db_escape_string ($this->user), db_escape_string ($this->domain));
		}
		if (!$this->db->query ($sql)) {
			$this->quitDb ();
			return -1;
		}
		$buf = sqlite_fetch_array ($this->db->result, 1);
		$this->listTotal = intval ($buf['TOTAL']);
		$this->db->free ();
		return 0;
	}

	function getWhiteList ($start, $num) {
		$this->whiteList = array ();
		$start = intval ($start);    
		$num = intval ($num);
		if ($this->listTotal <= 0) return 0;
		if ($start < 1 || $start > $this->listTotal) $start = 1;
		$start --;
		if ($num < 0 || $start + $num > $this->listTotal)
			$num = $this->listTotal;

		switch ($this->listType) {
			case QUARANTINE_WHILE_LIST:
			case QUARANTINE_BLACK_LIST:
				$sql = sprintf ("SELECT * FROM %s WHERE User = '%s' AND Domain = '%s' AND Type = %d LIMIT %d, %d;", $this->listTable, db_escape_string ($this->user), db_escape_string ($this->domain), $this->listType, $start, $num);
				break;
			default:
				$sql = sprintf ("SELECT * FROM %s WHERE User = '%s' AND Domain = '%s' LIMIT %d, %d;", $this->listTable, db_escape_string ($this->user), db_escape_string ($this->domain), $start, $num);
		}
		if (!$this->db->query ($sql)) {
			return -1;
		}
		while ($buf = sqlite_fetch_array ($this->db->result, 1)) {
			$id = intval ($buf['AutoID']);
			$this->whiteList[$id]=new WhiteListItem ($id, $buf['Email'], $buf['Type']);
		}
		$this->db->free ();
		return 0;
	}

	function delItemFromList ($id) {
		$id = intval ($id);
		if (!$id) return;
		$sql = sprintf ("DELETE FROM %s WHERE User = '%s' AND Domain = '%s' AND AutoID = %d ;",
				$this->listTable,
				db_escape_string ($this->user),
				db_escape_string ($this->domain),
				$id
			       );    
		$this->db->query ($sql);
		if (isset ($this->whiteList[$id])) {
			unset ($this->whiteList[$id]);
			$this->listTotal --;    
		}
	}

	function addItemToList ($email, $type, $file='') {
		if ($type != QUARANTINE_WHILE_LIST && $type != QUARANTINE_BLACK_LIST)
			return -1;
		if (!checkmailaddr($email))
			return -2;


		$sql = sprintf ("SELECT COUNT(*) as EMAILCOUNT FROM %s WHERE User= '%s' AND Domain = '%s' AND Email = '%s'", 
				$this->listTable,
				db_escape_string($this->user),db_escape_string($this->domain),db_escape_string($email)
			       );
		if (!$this->db->query ($sql)) {
			return -3;
		}


		$buf = sqlite_fetch_array ($this->db->result, 1);
		$id = intval ($buf['EMAILCOUNT']);
		if ($id > 0)
			return -4;

		if ($this->listTotal + 1 > QUARANTINE_WHITELIST_MAX) return -5;

		$sql = sprintf ("INSERT INTO %s (User , Domain , Email , Type ) VALUES ( '%s' , '%s' , '%s' , '%d' )" ,
				$this->listTable,
				db_escape_string ($this->user),
				db_escape_string ($this->domain),
				db_escape_string ($email),
				$type
			       );
		$this->db->query ($sql);
		$this->whiteList[$id]=new WhiteListItem ($id, $email, $type);
		$this->listTotal ++ ;

		if ($file) {
			$buf = array (array ('ACT'=>(($type==QUARANTINE_WHILE_LIST)?'F':'D'), 'FILE'=>$file));
			$this->process ($buf, $buf2);    
		}

		return 0;
	}

	function quitDb () {
		$this->db->close ();
		unset ($this->db);    
	}


	function set_login_user ($userInfo) {
		if (!is_array ($userInfo)) return false;
		if (!isset ($userInfo['USER'])) return false;
		$this->user = $userInfo['USER'];
		if (!isset ($userInfo['DOMAIN'])) return false;
		$this->domain = $userInfo['DOMAIN'];
		if (!isset ($userInfo['EMAIL'])) return false;
		$this->email = $userInfo['EMAIL'];
		if (!isset ($userInfo['PATH'])) return false;
		$this->path = $userInfo['PATH'];
		if (!isset ($userInfo['INIT'])) return false;
		$this->init = $userInfo['INIT'];
		return true;
	}

	function init_maillist () {
		$this->fullMailList = array ();
		$this->mailCnt = 0;
		$this->totalSize = 0;
		if (!is_dir ($this->path))
			return 0;
		if (!($dh = opendir ($this->path))) {
			return 0;
		}
		while (false !== ($file = readdir ($dh))) {
			if (strcmp ($file, '.')==0 || strcmp ($file, '..')==0)
				continue;
			list ($x, $x, $x, $time, $pid, $info) = explode ('.', $file);
			if (strcmp ($info, QUARANTINEINFOSUFFIX)==0) { // mail infor file
				$this->fullMailList[$pid.$time]['INFO'] = substr ($file, strlen(QUARANTINEFILEPREFIX));
				$this->fullMailList[$pid.$time]['TIME'] = $time;
				$this->fullMailList[$pid.$time]['FILE'] = $time.'.'.$pid;
				$this->fullMailList[$pid.$time]['PID']  = $pid;
			}
			else {

			}
		}
		closedir ($dh);
		uasort ($this->fullMailList, '_u_sort_func');
		$this->mailCnt = sizeof ($this->fullMailList);
		$this->totalSize = $this->get_dir_size ($this->path);
		return 0;
	}

	function get_file ($file) {
		if (strstr ($file, '..'))
			exit ('parameter error');
		return $this->path . '/' . QUARANTINEFILEPREFIX . $file;    
	}

	function get_dir_size ($dir) {
		if (!is_dir ($dir)) return false;
		$cmd = 'du -sh '.$dir;
		exec ($cmd, $buf);
		$buf = explode ('	', $buf[0]);
		return $buf[0];    
	}

	function get_quarantine_info ($file, &$info) {
		if (!file_exists ($file)) return false;
		$lines = array ();
		if (!($lines = file ($file))) return false;
		$info = array (
				'FROM'=> trim ($lines[0]),
				'TO'  => explode (',', trim ($lines[1])),
				'SUBJECT' => trim ($lines[2]),
				'SIZE' => trim ($lines[3]),
				'TYPE'=> trim ($lines[4]),
				'REASON'=>trim ($lines[5])
			      );
		return true;
	}

	function get_mail_info ($file, &$info) {
		return;
		/*
		   if (!file_exists ($file)) return false;    
		   $content = '';
		   if (!($fh = fopen ($file, 'r'))) return false;
		   while (!feof ($fh)) {
		   $content .= fgets ($fh);    
		   }
		   fclose ($fh);
		   $mimeDecodeParams = array(
		   'include_bodies' => false,
		   'decode_headers' => true,
		   'decode_bodies'  => false
		   );

		   $nl = (strpos($content,"\r\n")?"\r\n":"\n");
		   $mailDecode = new Mail_mimeDecode ($content , $nl);
		   $mailArr = $mailDecode->decode($mimeDecodeParams);
		   $info['SUBJECT'] = $mailArr->headers['subject'];
		   unset ($content);
		   unset ($mailArr);
		   unset ($mimeDecodeParams);
		   unset ($mailDecode);
		   $info['SIZE'] = filesize ($file);
		   return true;
		 */
	}

	function maillist ($start, $num) {
		$start = intval ($start);
		$num = intval ($num);
		$start --;
		if ($start < 0 || $num < 0 || $start + $num > $this->mailCnt)
			return false;
		$this->mailList = array ();
		$i = 0;
		reset ($this->fullMailList);
		$end = $start + $num;
		$this->start = $start + 1;
		$this->end   = $end;
		while (list ($id, $mailArr) = each ($this->fullMailList)) {
			if ($i < $start) {
				$i ++;
				continue;    
			}
			if ($i > $end)   break;
			if (!$this->get_quarantine_info ($this->get_file ($mailArr['INFO']), $qInfo))
				continue;
			/*
			   if (!$this->get_mail_info ($this->get_file ($mailArr['FILE']), $mInfo))
			   continue;
			 */
			$this->mailList[] = array (
					'REASON' => $qInfo['REASON'],
					'TYPE'   => $qInfo['TYPE'],
					'TIME'   => $mailArr['TIME'],
					'FILE'   => $mailArr['FILE'],
					'PID'    => $mailArr['PID'],
					'INFO'   => $mailArr['INFO'],
					'FROM'   => $qInfo['FROM'],
					'TO'     => $qInfo['TO'], //is a array
					'SUBJECT'=> $qInfo['SUBJECT'],
					'SIZE'   => $qInfo['SIZE']
					);
			$i ++;
		}
		return true;
	}

	function emptyQuarantine () {
		 $tmp = tempnam ('/tmp', 'QUARANTINEPROCESSMAIL.');
		//$tmp = "/tmp/zixia.tmp";
		$cmd = WI . " QuarantineProcessMail 2>&1 >".$tmp;

		$pipe = popen($cmd, 'w');
		if (!$pipe) {
			unlink ($tmp);
			return -1;
		}

		$i = 1;

		foreach ($this->fullMailList as $m_id=>$_m) {
			$cmd = sprintf ("%d,%s,D\n",$i,$this->get_file ($_m['FILE']));
			fputs ($pipe, $cmd, strlen ($cmd));
			$i ++;
		}

		pclose ($pipe);
		$fh = fopen ($tmp, 'rb');
		if (!$fh) {
			unlink ($tmp);
			return -2;
		}

		$output = fread ($fh, filesize ($tmp));
		fclose ($fh);
		unlink ($tmp);

		$output = explode ("\n", $output);

		for ($i=0; $i < sizeof ($output); $i ++) {
		$output[$i]=ltrim (trim ($output[$i]) );
      	        if (!$output[$i]) continue;	
		list ($no, $ret) = explode (',', $output[$i]);
			$no = intval ($no);
			if (!$no) continue;
			if ($ret != 0)
				return -3;
		}
		return 0;
	}

	function process ($jobList, &$result) {
		$result = array ();
		$tmp = tempnam ('/tmp', 'QUARANTINEPROCESSMAIL.');
		$cmd = WI . " QuarantineProcessMail 2>&1 >".$tmp;

		$pipe = popen($cmd, 'w');
		if (!$pipe) {
			unlink ($tmp);
			return -1;
		}
		for ($i = 0 ; $i < sizeof ($jobList); $i ++) {
			/*
			// by zixia 2004-07-31 : ugly hack, need to be fixed
			$cmd = ($i+1) . "," . $_SESSION['sCurrentUser'][PATH] . '/emlfile.gw.nospam.' . $jobList[$i]['FILE'] . "," . $jobList[$i]['ACT'] . "\n";
			 */
			// edit by windinsn, Jul 30
			// don't use session variables
			$cmd = sprintf ("%d,%s,%s\n",$i+1,$this->get_file ($jobList[$i]['FILE']),$jobList[$i]['ACT']);
			fputs ($pipe, $cmd, strlen ($cmd));
		}
		pclose ($pipe);
		$fh = fopen ($tmp, 'rb');
		if (!$fh) {
			unlink ($tmp);
			return -2;
		}
		$output = fread ($fh, filesize ($tmp));
		fclose ($fh);

		unlink ($tmp);
		$output = explode ("\n", $output);
		for ($i=0; $i < sizeof ($output); $i ++) {
			list ($no, $ret) = explode (',', $output[$i]);
			$no = intval ($no);
			if (!$no) continue;
			$result[] = array ($no, intval ($ret));
		}
		return 0;
	}
}

function _u_sort_func ($array1, $array2) {
	if ($array1['TIME'] > $array2['TIME'])
		return 1;
	elseif ($array1['TIME'] < $array2['TIME'])
		return -1;
	else
		return 0;
}

class PageTool {
	var $pageSize;
	var $pageNo;
	var $totalNo;
	var $totalPage;
	var $defaultPageSize;
	var $allowedPageSizes;
	var $num;
	var $start;
	var $end;
	var $etemNum;

	function PageTool ($pageNo, $totalNo, $pageSize=0, $defaultPageSize=PAGENUM, $allowedPageSizes = array (10, 20, 40, 80, 100)) {
		$pageSize = intval ($pageSize);
		$pageNo   = intval ($pageNo);
		$totalNo  = intval ($totalNo);
		$this->defaultPageSize = $defaultPageSize;
		$this->allowedPageSizes = $allowedPageSizes;
		$this->totalNo = max (0, $totalNo);
		if ($pageSize < min ($this->allowedPageSizes) || $pageSize > max ($this->allowedPageSizes)) {
			$pageSize = $this->defaultPageSize; 
		}
		$this->pageSize = $pageSize;
		$this->totalPage = intval (($this->totalNo - 1) / $this->pageSize + 1 );
		if ($pageNo < 1 || $pageNo > $this->totalPage)
			$pageNo = 1;
		$this->pageNo = $pageNo;
		$this->start = ($this->pageNo - 1) * $this->pageSize + 1;
		$this->end   = min ($this->totalNo, $this->start + $this->pageSize - 1);
		$this->num   = $this->end - $this->start + 1;
	}

	function gen_url ($url, $parmas) {
		return $url . (strstr ($url, '?')?'&':'?') . $parmas;
	}

	function page_list ($url, $etemNum) {
		if ($etemNum > $this->totalPage) $etemNum = $this->totalPage;
		$pre = intval ($etemNum / 2);
		$next = $pre;
		echo '[&nbsp;';
		if ($this->pageNo-$pre > 1) 
			echo '<a href="'.$this->gen_url ($url, 'pn=1&ps='.$this->pageSize).'">&lt;&lt;</a>&nbsp;'.
				'<a href="'.$this->gen_url ($url, 'pn='.($this->pageNo-$pre-1).'&ps='.$this->pageSize).'">&lt;</a>&nbsp;';
		for ($i=max(1,$this->pageNo-$pre); $i < $this->pageNo; $i ++) 
			echo '<a href="'.$this->gen_url ($url, 'pn='.$i.'&ps='.$this->pageSize).'">'.$i.'</a>&nbsp;';
		echo $this->pageNo . '&nbsp;';
		for ($i=$this->pageNo+1; $i <= $this->pageNo+$next; $i ++)
			echo '<a href="'.$this->gen_url ($url, 'pn='.$i.'&ps='.$this->pageSize).'">'.$i.'</a>&nbsp;';
		if ($this->pageNo-$next < $this->totalPage)
			echo '<a href="'.$this->gen_url ($url, 'pn='.($this->pageNo+$next+1).'&ps='.$this->pageSize).'">&gt;</a>&nbsp;'.
				'<a href="'.$this->gen_url ($url, 'pn='.($this->totalPage).'&ps='.$this->pageSize).'">&gt;&gt;</a>&nbsp;';
		echo ']&nbsp;&nbsp;&nbsp;';
	}

	function page_form ($formName, $actions) {
		?>
			<?=_("Jump to")?><select name="pn" <?php echo $actions; ?>>
			<?php
			for ($i=1; $i <= $this->totalPage; $i ++) {
				if ($i == $this->pageNo)
					echo '<option value="'.$i.'" selected>'.$i.'</option>';
				else
					echo '<option value="'.$i.'">'.$i.'</option>';
			}
		?>
			</select>, <?=_("Item number")?><select name="ps" <?php echo $actions; ?>>
			<?php
			foreach ($this->allowedPageSizes as $ps) {
				if ($ps == $this->pageSize)
					echo '<option value="'.$ps.'" selected>'.$ps.'</option>';
				else
					echo '<option value="'.$ps.'">'.$ps.'</option>';
			}
		?>
			</select>
			<?php    
	}

	function page_bar ($formName, $url, $etemNum=5, $actions='') {
		if ($etemNum) {
			$this->page_list ($url, $etemNum);
		}
		$this->page_form ($formName, $actions);
	}
}

/*
 * add end
 * add by Xiaoying Hu , jul 30,2004
 */
?>
